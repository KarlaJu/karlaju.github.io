<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technology on Karla Jurado</title>
    <link>/series/technology/</link>
    <description>Recent content in Technology on Karla Jurado</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zn-Hans</language>
    <lastBuildDate>Sun, 20 Oct 2019 21:45:28 -0500</lastBuildDate>
    
	<atom:link href="/series/technology/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introducción a Swift</title>
      <link>/post/swift-intro/</link>
      <pubDate>Sun, 20 Oct 2019 21:45:28 -0500</pubDate>
      
      <guid>/post/swift-intro/</guid>
      <description>Introducción a Swift Contenido 1.- Variables
2.- Constantes
3.- Tipos de datos
 3.1.- Entero
 3.2.- Cadenas
 3.3.- Flotante
 3.4.- Double
  4.- Funciones
5.- Modelado de datos
 5.1.- Tuplas
 5.1.1.- Switch
 5.2.- Opcionales
 5.2.1.- IF LET
 5.2.2.- Casos particulares con opcionales
 5.3.- Arreglos
 5.4.- Enums
 5.4.1.- Switch con enums
 4.5.- Diccionarios
 5.6.- Conjuntos
  Variables La declaración de una variable, puede ser de dos formas:
var number: Int var secondNumber = 8 // Inferencia de tipos  Constantes La declaración de una contante, una vez que la variable se declare con let, su valor ya no puede cambiar:
let number = 8   Una recomendación es siempre utilizar let. Existirán casos donde no se pueda utilizar, pero siempre es mejor utilizar let.
 Tipos de datos Si no se le indica el tipo de dato a la variable, el compilador lo tomará de acuerdo a su valor.
Entero El valor por defecto que tiene un entero es de 64 bits.
var number: Int = 10 let number: Int let number: Int8 = 120 //Se puede indicar el valor máximo que usará   Se debe tener cuidado cuando se indique el valor máximo que utilizará porque si rebasa ese valor puede causar un overflow.</description>
    </item>
    
    <item>
      <title>Vim</title>
      <link>/post/vim/</link>
      <pubDate>Tue, 24 Sep 2019 21:03:12 -0500</pubDate>
      
      <guid>/post/vim/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Introducción a React Js</title>
      <link>/post/react-intro/</link>
      <pubDate>Tue, 09 Apr 2019 21:32:07 -0500</pubDate>
      
      <guid>/post/react-intro/</guid>
      <description>¿Qué es?  Biblioteca para construir interfaces web Es la vista en MVC Sigle Page Application Sólo se encarga de la interfaz  ¿Por qué? Hacer más fácil la creación de interfaces web usando javascript
Ventajas  Miestras escribes código podrás ver tus cambios Utiliza virtual Dom para refrescar la parte en la memoria que cambio Tiene/utiliza componentes  Componentes  API reusable Crea etiquetas HTML para reutilizar Reusable HTML, CSS, Javascript  Instalación  Instalar node.js Generador de proyectos   $ npm install -g create-react-app   Creación de la aplicación react   $ create-reat-app my-app   Entrar a la carpeta del proyecto   $ cd my-app   Levantar el proyecto   $ npm start  En el punto número cuatro al entrar a la carpeta del proyecto, aparecerá la siguiente estructura de archivos:
my-app
   Descripción    README.md  Documentación del proyecto   package.json Archivo que contiene el nombre, la version, dependencias del proyecto, etc.   package.lock.json Archivo generado para guardar las versiones del proyecto, este archivo no se toca   .gitignore Para la utilización de git   node_modules Se instalan los entornos js que se utilizarán para el proyecto   public Donde se colocan los archivos HTML   --- index.</description>
    </item>
    
  </channel>
</rss>